/*
 * Generated by gdbus-codegen 2.32.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_AUDIO_INTERFACE_H__
#define __DBUS_AUDIO_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.genivi.audiomanager.commandinterface */

#define TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE (org_genivi_audiomanager_commandinterface_get_type ())
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE, OrgGeniviAudiomanagerCommandinterface))
#define IS_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE))
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE, OrgGeniviAudiomanagerCommandinterfaceIface))

struct _OrgGeniviAudiomanagerCommandinterface;
typedef struct _OrgGeniviAudiomanagerCommandinterface OrgGeniviAudiomanagerCommandinterface;
typedef struct _OrgGeniviAudiomanagerCommandinterfaceIface OrgGeniviAudiomanagerCommandinterfaceIface;

struct _OrgGeniviAudiomanagerCommandinterfaceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_connect) (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_sourceID,
    guint16 arg_sinkID);

  gboolean (*handle_disconnect) (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_mainConnectionID);

  gboolean (*handle_get_list_main_connections) (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation);

  void (*removed_main_connection) (
    OrgGeniviAudiomanagerCommandinterface *object,
    guint16 arg_unnamed_arg0);

  void (*source_notification) (
    OrgGeniviAudiomanagerCommandinterface *object,
    guint16 arg_sourceID,
    gint16 arg_type,
    gint16 arg_value);

};

GType org_genivi_audiomanager_commandinterface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_genivi_audiomanager_commandinterface_interface_info (void);
guint org_genivi_audiomanager_commandinterface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_genivi_audiomanager_commandinterface_complete_connect (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation,
    gint16 result,
    guint16 mainConnectionID);

void org_genivi_audiomanager_commandinterface_complete_disconnect (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation,
    gint16 result);

void org_genivi_audiomanager_commandinterface_complete_get_list_main_connections (
    OrgGeniviAudiomanagerCommandinterface *object,
    GDBusMethodInvocation *invocation,
    gint16 result,
    GVariant *listConnections);



/* D-Bus signal emissions functions: */
void org_genivi_audiomanager_commandinterface_emit_removed_main_connection (
    OrgGeniviAudiomanagerCommandinterface *object,
    guint16 arg_unnamed_arg0);

void org_genivi_audiomanager_commandinterface_emit_source_notification (
    OrgGeniviAudiomanagerCommandinterface *object,
    guint16 arg_sourceID,
    gint16 arg_type,
    gint16 arg_value);



/* D-Bus method calls: */
void org_genivi_audiomanager_commandinterface_call_connect (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    guint16 arg_sourceID,
    guint16 arg_sinkID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_genivi_audiomanager_commandinterface_call_connect_finish (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    gint16 *out_result,
    guint16 *out_mainConnectionID,
    GAsyncResult *res,
    GError **error);

gboolean org_genivi_audiomanager_commandinterface_call_connect_sync (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    guint16 arg_sourceID,
    guint16 arg_sinkID,
    gint16 *out_result,
    guint16 *out_mainConnectionID,
    GCancellable *cancellable,
    GError **error);

void org_genivi_audiomanager_commandinterface_call_disconnect (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    guint16 arg_mainConnectionID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_genivi_audiomanager_commandinterface_call_disconnect_finish (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    gint16 *out_result,
    GAsyncResult *res,
    GError **error);

gboolean org_genivi_audiomanager_commandinterface_call_disconnect_sync (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    guint16 arg_mainConnectionID,
    gint16 *out_result,
    GCancellable *cancellable,
    GError **error);

void org_genivi_audiomanager_commandinterface_call_get_list_main_connections (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_genivi_audiomanager_commandinterface_call_get_list_main_connections_finish (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    gint16 *out_result,
    GVariant **out_listConnections,
    GAsyncResult *res,
    GError **error);

gboolean org_genivi_audiomanager_commandinterface_call_get_list_main_connections_sync (
    OrgGeniviAudiomanagerCommandinterface *proxy,
    gint16 *out_result,
    GVariant **out_listConnections,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY (org_genivi_audiomanager_commandinterface_proxy_get_type ())
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY, OrgGeniviAudiomanagerCommandinterfaceProxy))
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY, OrgGeniviAudiomanagerCommandinterfaceProxyClass))
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY, OrgGeniviAudiomanagerCommandinterfaceProxyClass))
#define IS_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY))
#define IS_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_PROXY))

typedef struct _OrgGeniviAudiomanagerCommandinterfaceProxy OrgGeniviAudiomanagerCommandinterfaceProxy;
typedef struct _OrgGeniviAudiomanagerCommandinterfaceProxyClass OrgGeniviAudiomanagerCommandinterfaceProxyClass;
typedef struct _OrgGeniviAudiomanagerCommandinterfaceProxyPrivate OrgGeniviAudiomanagerCommandinterfaceProxyPrivate;

struct _OrgGeniviAudiomanagerCommandinterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGeniviAudiomanagerCommandinterfaceProxyPrivate *priv;
};

struct _OrgGeniviAudiomanagerCommandinterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_genivi_audiomanager_commandinterface_proxy_get_type (void) G_GNUC_CONST;

void org_genivi_audiomanager_commandinterface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGeniviAudiomanagerCommandinterface *org_genivi_audiomanager_commandinterface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGeniviAudiomanagerCommandinterface *org_genivi_audiomanager_commandinterface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_genivi_audiomanager_commandinterface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGeniviAudiomanagerCommandinterface *org_genivi_audiomanager_commandinterface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGeniviAudiomanagerCommandinterface *org_genivi_audiomanager_commandinterface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON (org_genivi_audiomanager_commandinterface_skeleton_get_type ())
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON, OrgGeniviAudiomanagerCommandinterfaceSkeleton))
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON, OrgGeniviAudiomanagerCommandinterfaceSkeletonClass))
#define ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON, OrgGeniviAudiomanagerCommandinterfaceSkeletonClass))
#define IS_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON))
#define IS_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GENIVI_AUDIOMANAGER_COMMANDINTERFACE_SKELETON))

typedef struct _OrgGeniviAudiomanagerCommandinterfaceSkeleton OrgGeniviAudiomanagerCommandinterfaceSkeleton;
typedef struct _OrgGeniviAudiomanagerCommandinterfaceSkeletonClass OrgGeniviAudiomanagerCommandinterfaceSkeletonClass;
typedef struct _OrgGeniviAudiomanagerCommandinterfaceSkeletonPrivate OrgGeniviAudiomanagerCommandinterfaceSkeletonPrivate;

struct _OrgGeniviAudiomanagerCommandinterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGeniviAudiomanagerCommandinterfaceSkeletonPrivate *priv;
};

struct _OrgGeniviAudiomanagerCommandinterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_genivi_audiomanager_commandinterface_skeleton_get_type (void) G_GNUC_CONST;

OrgGeniviAudiomanagerCommandinterface *org_genivi_audiomanager_commandinterface_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_AUDIO_INTERFACE_H__ */
