/*
 * @@@ LICENSE
 * Copyright (C) 2015, LG Electronics, All Right Reserved.
 * No part of this source code may be communicated, distributed, reproduced
 * or transmitted in any form or by any means, electronic or mechanical or
 * otherwise, for any purpose, without the prior written permission of
 * LG Electronics.
 * LICENSE @@@
 *
 * Design/Author : jaewoon.kim@lge.com, sandeep.ankolekar@lge.com
 * Date : Jan. 21, 2016.
 * Modified : April 18, 2016.
 *
 * <IHU TEM-IL> Detailed note is as follows.
 *
 * This FIDL is for CommonTypes for the below package, it will be imported in each services' FIDL
 * 		1. Service Name = com.lge.temil
 *
 * This FIDL is based on the below spec document :
 * CEVT, "SWRS IP COMMAND BUS MESSAGES," Document No. 8888260713 (DRAFT), Rev. 011, Vol. 01, 2015-12-18.
 * (Jaewoon KIM's Proposal Draft Version)
 */


package com.lge.temil

typeCollection CommonTypes {
	<**
		@description: The struct of DateTime
		@param : year
		@param : month
		@param : day
		@param : hour
		@param : minute
		@param : second
	**>
	struct DateTime {
		UInt16 year
		UInt8 month
		UInt8 day
		UInt8 hour
		UInt8 minute
		UInt8 second
	}

	<** @description : Used to indicate a source for an SMS or Voice call **>
	enumeration SourceStatus {
		unidentified	= 0
		trusted			= 1
		callCenter 		= 2
		psap 			= 3
		outgoing 		= 4
	}

	enumeration OnOffStatus {
		offState		= 0
		onState			= 1
		unknownState	= 2
	}

	enumeration OnOffSetting {
		offSetting	= 0
		onSetting	= 1
	}

	<** @description : Generic status **>
	enumeration GenericOkStatus {
		unknown	= 0
		ok		= 1
		notOk 	= 2
	}

	<** @description : Used to indicate the status of a audio i/o(mic/speaker) system **>
	struct AudioStatus {
		GenericOkStatus micStatus
		GenericOkStatus speakerStatus
	}

	<**
		@description: The struct of CoordinatesLongLat - Coordinates in degrees/360 x 2^32. Positive values are North and East
		@param : longitude
		@param : latitude
	**>
	struct CoordinatesLongLat {
		Int32 longitude
		Int32 latitude
	}

	enumeration GnssFixType {
		<** @description : not available : no GNSS information available (e.g no GNSS antenna connection, GNSS receiver failure) **>
		notAvailable	= 0
		<** @description : No Fix: satellites received - no position available **>
		noFix			= 1
		<** @description : 2D fix : satellites received : 2 dimensional position fix **>
		fix2D			= 2
		<** @description : 3D fix : satellites received : 3 dimensional position fix **>
		fix3D			= 3
		<** @description : Based on a position saved after last driving cycle (Cold Start Fix) **>
		startupMode		= 4
	}

	enumeration DeadReckoningType {
		<** @description : not available : no GNSS information available (e.g no GNSS antenna connection, GNSS receiver failure) **>
		noDr			= 0
		<** @description : No Fix: satellites received - no position available **>
		drNoMapMatch	= 1
		<** @description : 2D fix : satellites received : 2 dimensional position fix **>
		drMapMatched	= 2
	}

	struct GPSSystemTime {
		<** @description : the GPS week number **>
		UInt16 weekNumber
		<** @description : time of week in 1/1000 s **>
		UInt32 timeOfWeek
	}

	enumeration XCallID {
		<** @description : sdnCall **>
		sdnCall			= 0
		<** @description : eCall **>
		eCall			= 1
		<** @description : bCall **>
		bCall			= 2
		<** @description : iCall **>
		iCall			= 3
	}
}

